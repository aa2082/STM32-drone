
tmc6300_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002564  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002624  08002624  00012624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002690  08002690  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002698  08002698  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080026ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080026ac  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f26  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013bb  00000000  00000000  00027f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  00029318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00029940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc82  00000000  00000000  00029ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000813f  00000000  00000000  00039b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060f27  00000000  00000000  00041cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a2bd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001510  00000000  00000000  000a2c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800260c 	.word	0x0800260c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800260c 	.word	0x0800260c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fa68 	bl	8000974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f868 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f902 	bl	80006b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ac:	f000 f8d0 	bl	8000650 <MX_USART2_UART_Init>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
	HAL_Delay(500);
	*/
    /* USER CODE BEGIN 3 */

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 80004b0:	23a0      	movs	r3, #160	; 0xa0
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	2201      	movs	r2, #1
 80004b6:	2180      	movs	r1, #128	; 0x80
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fd21 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	00db      	lsls	r3, r3, #3
 80004c2:	482b      	ldr	r0, [pc, #172]	; (8000570 <main+0xd4>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	0019      	movs	r1, r3
 80004c8:	f000 fd1a 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f000 fac1 	bl	8000a54 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 80004d2:	2380      	movs	r3, #128	; 0x80
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	4826      	ldr	r0, [pc, #152]	; (8000570 <main+0xd4>)
 80004d8:	2200      	movs	r2, #0
 80004da:	0019      	movs	r1, r3
 80004dc:	f000 fd10 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80004e0:	4b23      	ldr	r3, [pc, #140]	; (8000570 <main+0xd4>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	2108      	movs	r1, #8
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fd0a 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f000 fab1 	bl	8000a54 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 80004f2:	23a0      	movs	r3, #160	; 0xa0
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	2200      	movs	r2, #0
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fd00 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <main+0xd8>)
 8000502:	2201      	movs	r2, #1
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fcfa 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f000 faa1 	bl	8000a54 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <main+0xd4>)
 8000514:	2200      	movs	r2, #0
 8000516:	2108      	movs	r1, #8
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fcf1 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <main+0xd4>)
 8000520:	2201      	movs	r2, #1
 8000522:	2140      	movs	r1, #64	; 0x40
 8000524:	0018      	movs	r0, r3
 8000526:	f000 fceb 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fa92 	bl	8000a54 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <main+0xd8>)
 8000532:	2200      	movs	r2, #0
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fce2 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <main+0xd4>)
 800053e:	2201      	movs	r2, #1
 8000540:	2110      	movs	r1, #16
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fcdc 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000548:	2001      	movs	r0, #1
 800054a:	f000 fa83 	bl	8000a54 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <main+0xd4>)
 8000550:	2200      	movs	r2, #0
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	0018      	movs	r0, r3
 8000556:	f000 fcd3 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 800055a:	2380      	movs	r3, #128	; 0x80
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	4804      	ldr	r0, [pc, #16]	; (8000570 <main+0xd4>)
 8000560:	2201      	movs	r2, #1
 8000562:	0019      	movs	r1, r3
 8000564:	f000 fccc 	bl	8000f00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 fa73 	bl	8000a54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 800056e:	e79f      	b.n	80004b0 <main+0x14>
 8000570:	50000400 	.word	0x50000400
 8000574:	50000800 	.word	0x50000800

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b099      	sub	sp, #100	; 0x64
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	242c      	movs	r4, #44	; 0x2c
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2334      	movs	r3, #52	; 0x34
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f002 f837 	bl	80025fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058e:	2318      	movs	r3, #24
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0018      	movs	r0, r3
 8000594:	2314      	movs	r3, #20
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f002 f82f 	bl	80025fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059e:	003b      	movs	r3, r7
 80005a0:	0018      	movs	r0, r3
 80005a2:	2318      	movs	r3, #24
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f002 f828 	bl	80025fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <SystemClock_Config+0xd4>)
 80005b2:	401a      	ands	r2, r3
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <SystemClock_Config+0xd0>)
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	0109      	lsls	r1, r1, #4
 80005ba:	430a      	orrs	r2, r1
 80005bc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005be:	0021      	movs	r1, r4
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2210      	movs	r2, #16
 80005c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2201      	movs	r2, #1
 80005ca:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	22a0      	movs	r2, #160	; 0xa0
 80005d6:	0212      	lsls	r2, r2, #8
 80005d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fcaa 	bl	8000f3c <HAL_RCC_OscConfig>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005ec:	f000 f906 	bl	80007fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	2118      	movs	r1, #24
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	220f      	movs	r2, #15
 80005f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2100      	movs	r1, #0
 8000614:	0018      	movs	r0, r3
 8000616:	f001 f80d 	bl	8001634 <HAL_RCC_ClockConfig>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800061e:	f000 f8ed 	bl	80007fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000622:	003b      	movs	r3, r7
 8000624:	2202      	movs	r2, #2
 8000626:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000628:	003b      	movs	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062e:	003b      	movs	r3, r7
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fa23 	bl	8001a7c <HAL_RCCEx_PeriphCLKConfig>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063a:	f000 f8df 	bl	80007fc <Error_Handler>
  }
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b019      	add	sp, #100	; 0x64
 8000644:	bd90      	pop	{r4, r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40007000 	.word	0x40007000
 800064c:	ffffe7ff 	.word	0xffffe7ff

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <MX_USART2_UART_Init+0x5c>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 800065c:	22e1      	movs	r2, #225	; 0xe1
 800065e:	0252      	lsls	r2, r2, #9
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000694:	0018      	movs	r0, r3
 8000696:	f001 fb17 	bl	8001cc8 <HAL_UART_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800069e:	f000 f8ad 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000028 	.word	0x20000028
 80006ac:	40004400 	.word	0x40004400

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b08b      	sub	sp, #44	; 0x2c
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	2414      	movs	r4, #20
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2314      	movs	r3, #20
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f001 ff9b 	bl	80025fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b4a      	ldr	r3, [pc, #296]	; (80007f0 <MX_GPIO_Init+0x140>)
 80006c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ca:	4b49      	ldr	r3, [pc, #292]	; (80007f0 <MX_GPIO_Init+0x140>)
 80006cc:	2104      	movs	r1, #4
 80006ce:	430a      	orrs	r2, r1
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006d2:	4b47      	ldr	r3, [pc, #284]	; (80007f0 <MX_GPIO_Init+0x140>)
 80006d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d6:	2204      	movs	r2, #4
 80006d8:	4013      	ands	r3, r2
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	4b44      	ldr	r3, [pc, #272]	; (80007f0 <MX_GPIO_Init+0x140>)
 80006e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006e2:	4b43      	ldr	r3, [pc, #268]	; (80007f0 <MX_GPIO_Init+0x140>)
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	430a      	orrs	r2, r1
 80006e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ea:	4b41      	ldr	r3, [pc, #260]	; (80007f0 <MX_GPIO_Init+0x140>)
 80006ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	4013      	ands	r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b3e      	ldr	r3, [pc, #248]	; (80007f0 <MX_GPIO_Init+0x140>)
 80006f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fa:	4b3d      	ldr	r3, [pc, #244]	; (80007f0 <MX_GPIO_Init+0x140>)
 80006fc:	2101      	movs	r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
 8000702:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <MX_GPIO_Init+0x140>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <MX_GPIO_Init+0x140>)
 8000710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <MX_GPIO_Init+0x140>)
 8000714:	2102      	movs	r1, #2
 8000716:	430a      	orrs	r2, r1
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <MX_GPIO_Init+0x140>)
 800071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071e:	2202      	movs	r2, #2
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000726:	23a0      	movs	r3, #160	; 0xa0
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	2200      	movs	r2, #0
 800072c:	21a0      	movs	r1, #160	; 0xa0
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fbe6 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000734:	238b      	movs	r3, #139	; 0x8b
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	482e      	ldr	r0, [pc, #184]	; (80007f4 <MX_GPIO_Init+0x144>)
 800073a:	2200      	movs	r2, #0
 800073c:	0019      	movs	r1, r3
 800073e:	f000 fbdf 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <MX_GPIO_Init+0x148>)
 8000744:	2200      	movs	r2, #0
 8000746:	2180      	movs	r1, #128	; 0x80
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fbd9 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0192      	lsls	r2, r2, #6
 8000754:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2284      	movs	r2, #132	; 0x84
 800075a:	0392      	lsls	r2, r2, #14
 800075c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000764:	193b      	adds	r3, r7, r4
 8000766:	4a24      	ldr	r2, [pc, #144]	; (80007f8 <MX_GPIO_Init+0x148>)
 8000768:	0019      	movs	r1, r3
 800076a:	0010      	movs	r0, r2
 800076c:	f000 fa4a 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	22a0      	movs	r2, #160	; 0xa0
 8000774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2201      	movs	r2, #1
 800077a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	193a      	adds	r2, r7, r4
 800078a:	23a0      	movs	r3, #160	; 0xa0
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fa37 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8000796:	0021      	movs	r1, r4
 8000798:	187b      	adds	r3, r7, r1
 800079a:	228b      	movs	r2, #139	; 0x8b
 800079c:	00d2      	lsls	r2, r2, #3
 800079e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	000c      	movs	r4, r1
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2201      	movs	r2, #1
 80007a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <MX_GPIO_Init+0x144>)
 80007b8:	0019      	movs	r1, r3
 80007ba:	0010      	movs	r0, r2
 80007bc:	f000 fa22 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007c0:	0021      	movs	r1, r4
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2201      	movs	r2, #1
 80007cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <MX_GPIO_Init+0x148>)
 80007de:	0019      	movs	r1, r3
 80007e0:	0010      	movs	r0, r2
 80007e2:	f000 fa0f 	bl	8000c04 <HAL_GPIO_Init>

}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b00b      	add	sp, #44	; 0x2c
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	40021000 	.word	0x40021000
 80007f4:	50000400 	.word	0x50000400
 80007f8:	50000800 	.word	0x50000800

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <HAL_MspInit+0x24>)
 800080e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x24>)
 8000812:	2101      	movs	r1, #1
 8000814:	430a      	orrs	r2, r1
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <HAL_MspInit+0x24>)
 800081a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <HAL_MspInit+0x24>)
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	0549      	lsls	r1, r1, #21
 8000822:	430a      	orrs	r2, r1
 8000824:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b089      	sub	sp, #36	; 0x24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	240c      	movs	r4, #12
 800083a:	193b      	adds	r3, r7, r4
 800083c:	0018      	movs	r0, r3
 800083e:	2314      	movs	r3, #20
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f001 feda 	bl	80025fc <memset>
  if(huart->Instance==USART2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <HAL_UART_MspInit+0x80>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d129      	bne.n	80008a6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_UART_MspInit+0x84>)
 8000854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_UART_MspInit+0x84>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0289      	lsls	r1, r1, #10
 800085c:	430a      	orrs	r2, r1
 800085e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_UART_MspInit+0x84>)
 8000862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0x84>)
 8000866:	2101      	movs	r1, #1
 8000868:	430a      	orrs	r2, r1
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_UART_MspInit+0x84>)
 800086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000870:	2201      	movs	r2, #1
 8000872:	4013      	ands	r3, r2
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000878:	0021      	movs	r1, r4
 800087a:	187b      	adds	r3, r7, r1
 800087c:	220c      	movs	r2, #12
 800087e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2202      	movs	r2, #2
 8000884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2203      	movs	r2, #3
 8000890:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2204      	movs	r2, #4
 8000896:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	187a      	adds	r2, r7, r1
 800089a:	23a0      	movs	r3, #160	; 0xa0
 800089c:	05db      	lsls	r3, r3, #23
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 f9af 	bl	8000c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b009      	add	sp, #36	; 0x24
 80008ac:	bd90      	pop	{r4, r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f89e 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008f0:	4813      	ldr	r0, [pc, #76]	; (8000940 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008f2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <LoopForever+0x6>)
    LDR R1, [R0]
 80008f6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80008f8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <LoopForever+0xa>)
    CMP R1, R2
 80008fc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80008fe:	d105      	bne.n	800090c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000900:	4812      	ldr	r0, [pc, #72]	; (800094c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000902:	4913      	ldr	r1, [pc, #76]	; (8000950 <LoopForever+0x12>)
    STR R1, [R0]
 8000904:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000906:	4813      	ldr	r0, [pc, #76]	; (8000954 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000908:	4913      	ldr	r1, [pc, #76]	; (8000958 <LoopForever+0x1a>)
    STR R1, [R0]
 800090a:	6001      	str	r1, [r0, #0]

0800090c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <LoopForever+0x1e>)
  ldr r1, =_edata
 800090e:	4914      	ldr	r1, [pc, #80]	; (8000960 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <LoopForever+0x26>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a11      	ldr	r2, [pc, #68]	; (8000968 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000924:	4c11      	ldr	r4, [pc, #68]	; (800096c <LoopForever+0x2e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000932:	f7ff ffd8 	bl	80008e6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f001 fe3d 	bl	80025b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093a:	f7ff fdaf 	bl	800049c <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
   ldr   r0, =_estack
 8000940:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000944:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000948:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800094c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000950:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000954:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000958:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000964:	080026a0 	.word	0x080026a0
  ldr r2, =_sbss
 8000968:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800096c:	200000b0 	.word	0x200000b0

08000970 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC1_IRQHandler>
	...

08000974 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_Init+0x3c>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_Init+0x3c>)
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	430a      	orrs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098c:	2000      	movs	r0, #0
 800098e:	f000 f811 	bl	80009b4 <HAL_InitTick>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d003      	beq.n	800099e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e001      	b.n	80009a2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800099e:	f7ff ff33 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
}
 80009a6:	0018      	movs	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b002      	add	sp, #8
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_InitTick+0x5c>)
 80009be:	681c      	ldr	r4, [r3, #0]
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_InitTick+0x60>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	0019      	movs	r1, r3
 80009c6:	23fa      	movs	r3, #250	; 0xfa
 80009c8:	0098      	lsls	r0, r3, #2
 80009ca:	f7ff fb9d 	bl	8000108 <__udivsi3>
 80009ce:	0003      	movs	r3, r0
 80009d0:	0019      	movs	r1, r3
 80009d2:	0020      	movs	r0, r4
 80009d4:	f7ff fb98 	bl	8000108 <__udivsi3>
 80009d8:	0003      	movs	r3, r0
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 f905 	bl	8000bea <HAL_SYSTICK_Config>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e00f      	b.n	8000a08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d80b      	bhi.n	8000a06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2301      	movs	r3, #1
 80009f2:	425b      	negs	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f8e2 	bl	8000bc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_InitTick+0x64>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001a      	movs	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	18d2      	adds	r2, r2, r3
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	200000ac 	.word	0x200000ac

08000a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	200000ac 	.word	0x200000ac

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff fff0 	bl	8000a40 <HAL_GetTick>
 8000a60:	0003      	movs	r3, r0
 8000a62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	001a      	movs	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	189b      	adds	r3, r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	f7ff ffe0 	bl	8000a40 <HAL_GetTick>
 8000a80:	0002      	movs	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b004      	add	sp, #16
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab0:	d828      	bhi.n	8000b04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab2:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <__NVIC_SetPriority+0xd4>)
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	33c0      	adds	r3, #192	; 0xc0
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	589b      	ldr	r3, [r3, r2]
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	2203      	movs	r2, #3
 8000aca:	400a      	ands	r2, r1
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	21ff      	movs	r1, #255	; 0xff
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2303      	movs	r3, #3
 8000aea:	4003      	ands	r3, r0
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	481f      	ldr	r0, [pc, #124]	; (8000b70 <__NVIC_SetPriority+0xd4>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	33c0      	adds	r3, #192	; 0xc0
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b02:	e031      	b.n	8000b68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <__NVIC_SetPriority+0xd8>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	400b      	ands	r3, r1
 8000b10:	3b08      	subs	r3, #8
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	3306      	adds	r3, #6
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	18d3      	adds	r3, r2, r3
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	1dfa      	adds	r2, r7, #7
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	0011      	movs	r1, r2
 8000b24:	2203      	movs	r2, #3
 8000b26:	400a      	ands	r2, r1
 8000b28:	00d2      	lsls	r2, r2, #3
 8000b2a:	21ff      	movs	r1, #255	; 0xff
 8000b2c:	4091      	lsls	r1, r2
 8000b2e:	000a      	movs	r2, r1
 8000b30:	43d2      	mvns	r2, r2
 8000b32:	401a      	ands	r2, r3
 8000b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	019b      	lsls	r3, r3, #6
 8000b3a:	22ff      	movs	r2, #255	; 0xff
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	2303      	movs	r3, #3
 8000b46:	4003      	ands	r3, r0
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <__NVIC_SetPriority+0xd8>)
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	001c      	movs	r4, r3
 8000b54:	230f      	movs	r3, #15
 8000b56:	4023      	ands	r3, r4
 8000b58:	3b08      	subs	r3, #8
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	3306      	adds	r3, #6
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	18c3      	adds	r3, r0, r3
 8000b64:	3304      	adds	r3, #4
 8000b66:	601a      	str	r2, [r3, #0]
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b003      	add	sp, #12
 8000b6e:	bd90      	pop	{r4, r7, pc}
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1e5a      	subs	r2, r3, #1
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	045b      	lsls	r3, r3, #17
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d301      	bcc.n	8000b90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e010      	b.n	8000bb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <SysTick_Config+0x44>)
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	3a01      	subs	r2, #1
 8000b96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b98:	2301      	movs	r3, #1
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff ff7c 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x44>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x44>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	210f      	movs	r1, #15
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	1c02      	adds	r2, r0, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ffbf 	bl	8000b78 <SysTick_Config>
 8000bfa:	0003      	movs	r3, r0
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c1a:	e155      	b.n	8000ec8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	4091      	lsls	r1, r2
 8000c26:	000a      	movs	r2, r1
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d100      	bne.n	8000c34 <HAL_GPIO_Init+0x30>
 8000c32:	e146      	b.n	8000ec2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2203      	movs	r2, #3
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d005      	beq.n	8000c4c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2203      	movs	r2, #3
 8000c46:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d130      	bne.n	8000cae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	43da      	mvns	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	409a      	lsls	r2, r3
 8000c6e:	0013      	movs	r3, r2
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c82:	2201      	movs	r2, #1
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	091b      	lsrs	r3, r3, #4
 8000c98:	2201      	movs	r2, #1
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	0013      	movs	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d017      	beq.n	8000cea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2203      	movs	r2, #3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d123      	bne.n	8000d3e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	58d3      	ldr	r3, [r2, r3]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	2207      	movs	r2, #7
 8000d08:	4013      	ands	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	43da      	mvns	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	691a      	ldr	r2, [r3, #16]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2107      	movs	r1, #7
 8000d22:	400b      	ands	r3, r1
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	409a      	lsls	r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	08da      	lsrs	r2, r3, #3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3208      	adds	r2, #8
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	6939      	ldr	r1, [r7, #16]
 8000d3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	23c0      	movs	r3, #192	; 0xc0
 8000d78:	029b      	lsls	r3, r3, #10
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d100      	bne.n	8000d80 <HAL_GPIO_Init+0x17c>
 8000d7e:	e0a0      	b.n	8000ec2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d80:	4b57      	ldr	r3, [pc, #348]	; (8000ee0 <HAL_GPIO_Init+0x2dc>)
 8000d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d84:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <HAL_GPIO_Init+0x2dc>)
 8000d86:	2101      	movs	r1, #1
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8c:	4a55      	ldr	r2, [pc, #340]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	589b      	ldr	r3, [r3, r2]
 8000d98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	4013      	ands	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	409a      	lsls	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	43da      	mvns	r2, r3
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	23a0      	movs	r3, #160	; 0xa0
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d01f      	beq.n	8000dfa <HAL_GPIO_Init+0x1f6>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4a      	ldr	r2, [pc, #296]	; (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0x1f2>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a49      	ldr	r2, [pc, #292]	; (8000eec <HAL_GPIO_Init+0x2e8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a48      	ldr	r2, [pc, #288]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x1ea>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a47      	ldr	r2, [pc, #284]	; (8000ef4 <HAL_GPIO_Init+0x2f0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x1e6>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a46      	ldr	r2, [pc, #280]	; (8000ef8 <HAL_GPIO_Init+0x2f4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x1e2>
 8000de2:	2305      	movs	r3, #5
 8000de4:	e00a      	b.n	8000dfc <HAL_GPIO_Init+0x1f8>
 8000de6:	2306      	movs	r3, #6
 8000de8:	e008      	b.n	8000dfc <HAL_GPIO_Init+0x1f8>
 8000dea:	2304      	movs	r3, #4
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x1f8>
 8000dee:	2303      	movs	r3, #3
 8000df0:	e004      	b.n	8000dfc <HAL_GPIO_Init+0x1f8>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_Init+0x1f8>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_Init+0x1f8>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	2103      	movs	r1, #3
 8000e00:	400a      	ands	r2, r1
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4093      	lsls	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e0c:	4935      	ldr	r1, [pc, #212]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <HAL_GPIO_Init+0x2f8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	43da      	mvns	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	025b      	lsls	r3, r3, #9
 8000e32:	4013      	ands	r3, r2
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <HAL_GPIO_Init+0x2f8>)
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_GPIO_Init+0x2f8>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	43da      	mvns	r2, r3
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	029b      	lsls	r3, r3, #10
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <HAL_GPIO_Init+0x2f8>)
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_GPIO_Init+0x2f8>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	035b      	lsls	r3, r3, #13
 8000e86:	4013      	ands	r3, r2
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_GPIO_Init+0x2f8>)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_GPIO_Init+0x2f8>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	039b      	lsls	r3, r3, #14
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_GPIO_Init+0x2f8>)
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	40da      	lsrs	r2, r3
 8000ed0:	1e13      	subs	r3, r2, #0
 8000ed2:	d000      	beq.n	8000ed6 <HAL_GPIO_Init+0x2d2>
 8000ed4:	e6a2      	b.n	8000c1c <HAL_GPIO_Init+0x18>
  }
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b006      	add	sp, #24
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	50000400 	.word	0x50000400
 8000eec:	50000800 	.word	0x50000800
 8000ef0:	50000c00 	.word	0x50000c00
 8000ef4:	50001000 	.word	0x50001000
 8000ef8:	50001c00 	.word	0x50001c00
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	0008      	movs	r0, r1
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	1cbb      	adds	r3, r7, #2
 8000f0e:	1c02      	adds	r2, r0, #0
 8000f10:	801a      	strh	r2, [r3, #0]
 8000f12:	1c7b      	adds	r3, r7, #1
 8000f14:	1c0a      	adds	r2, r1, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f18:	1c7b      	adds	r3, r7, #1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f20:	1cbb      	adds	r3, r7, #2
 8000f22:	881a      	ldrh	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f2a:	1cbb      	adds	r3, r7, #2
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f000 fb6c 	bl	8001628 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f50:	4bc8      	ldr	r3, [pc, #800]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	220c      	movs	r2, #12
 8000f56:	4013      	ands	r3, r2
 8000f58:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f5a:	4bc6      	ldr	r3, [pc, #792]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	025b      	lsls	r3, r3, #9
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d100      	bne.n	8000f72 <HAL_RCC_OscConfig+0x36>
 8000f70:	e07d      	b.n	800106e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d007      	beq.n	8000f88 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b0c      	cmp	r3, #12
 8000f7c:	d112      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x68>
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	025b      	lsls	r3, r3, #9
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d10d      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	4bba      	ldr	r3, [pc, #744]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	029b      	lsls	r3, r3, #10
 8000f90:	4013      	ands	r3, r2
 8000f92:	d100      	bne.n	8000f96 <HAL_RCC_OscConfig+0x5a>
 8000f94:	e06a      	b.n	800106c <HAL_RCC_OscConfig+0x130>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d166      	bne.n	800106c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f000 fb42 	bl	8001628 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	025b      	lsls	r3, r3, #9
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d107      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x84>
 8000fb0:	4bb0      	ldr	r3, [pc, #704]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4baf      	ldr	r3, [pc, #700]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	0249      	lsls	r1, r1, #9
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e027      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	23a0      	movs	r3, #160	; 0xa0
 8000fc6:	02db      	lsls	r3, r3, #11
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d10e      	bne.n	8000fea <HAL_RCC_OscConfig+0xae>
 8000fcc:	4ba9      	ldr	r3, [pc, #676]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4ba8      	ldr	r3, [pc, #672]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	02c9      	lsls	r1, r1, #11
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	4ba6      	ldr	r3, [pc, #664]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4ba5      	ldr	r3, [pc, #660]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	0249      	lsls	r1, r1, #9
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e012      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000fea:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4ba1      	ldr	r3, [pc, #644]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000ff0:	49a1      	ldr	r1, [pc, #644]	; (8001278 <HAL_RCC_OscConfig+0x33c>)
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	4b9f      	ldr	r3, [pc, #636]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	025b      	lsls	r3, r3, #9
 8000ffe:	4013      	ands	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4b9b      	ldr	r3, [pc, #620]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b9a      	ldr	r3, [pc, #616]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 800100a:	499c      	ldr	r1, [pc, #624]	; (800127c <HAL_RCC_OscConfig+0x340>)
 800100c:	400a      	ands	r2, r1
 800100e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d014      	beq.n	8001042 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fd12 	bl	8000a40 <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001022:	f7ff fd0d 	bl	8000a40 <HAL_GetTick>
 8001026:	0002      	movs	r2, r0
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e2f9      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001034:	4b8f      	ldr	r3, [pc, #572]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	029b      	lsls	r3, r3, #10
 800103c:	4013      	ands	r3, r2
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0xe6>
 8001040:	e015      	b.n	800106e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fcfd 	bl	8000a40 <HAL_GetTick>
 8001046:	0003      	movs	r3, r0
 8001048:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fcf8 	bl	8000a40 <HAL_GetTick>
 8001050:	0002      	movs	r2, r0
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	; 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e2e4      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800105e:	4b85      	ldr	r3, [pc, #532]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	029b      	lsls	r3, r3, #10
 8001066:	4013      	ands	r3, r2
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0x110>
 800106a:	e000      	b.n	800106e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2202      	movs	r2, #2
 8001074:	4013      	ands	r3, r2
 8001076:	d100      	bne.n	800107a <HAL_RCC_OscConfig+0x13e>
 8001078:	e099      	b.n	80011ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	2220      	movs	r2, #32
 8001084:	4013      	ands	r3, r2
 8001086:	d009      	beq.n	800109c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001088:	4b7a      	ldr	r3, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b79      	ldr	r3, [pc, #484]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 800108e:	2120      	movs	r1, #32
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	2220      	movs	r2, #32
 8001098:	4393      	bics	r3, r2
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d005      	beq.n	80010ae <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	2b0c      	cmp	r3, #12
 80010a6:	d13e      	bne.n	8001126 <HAL_RCC_OscConfig+0x1ea>
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d13b      	bne.n	8001126 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010ae:	4b71      	ldr	r3, [pc, #452]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2204      	movs	r2, #4
 80010b4:	4013      	ands	r3, r2
 80010b6:	d004      	beq.n	80010c2 <HAL_RCC_OscConfig+0x186>
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e2b2      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	4b6c      	ldr	r3, [pc, #432]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <HAL_RCC_OscConfig+0x344>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	0019      	movs	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	021a      	lsls	r2, r3, #8
 80010d2:	4b68      	ldr	r3, [pc, #416]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80010d4:	430a      	orrs	r2, r1
 80010d6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010d8:	4b66      	ldr	r3, [pc, #408]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2209      	movs	r2, #9
 80010de:	4393      	bics	r3, r2
 80010e0:	0019      	movs	r1, r3
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80010e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ea:	f000 fbeb 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 80010ee:	0001      	movs	r1, r0
 80010f0:	4b60      	ldr	r3, [pc, #384]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	220f      	movs	r2, #15
 80010f8:	4013      	ands	r3, r2
 80010fa:	4a62      	ldr	r2, [pc, #392]	; (8001284 <HAL_RCC_OscConfig+0x348>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	000a      	movs	r2, r1
 8001100:	40da      	lsrs	r2, r3
 8001102:	4b61      	ldr	r3, [pc, #388]	; (8001288 <HAL_RCC_OscConfig+0x34c>)
 8001104:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001106:	4b61      	ldr	r3, [pc, #388]	; (800128c <HAL_RCC_OscConfig+0x350>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2513      	movs	r5, #19
 800110c:	197c      	adds	r4, r7, r5
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff fc50 	bl	80009b4 <HAL_InitTick>
 8001114:	0003      	movs	r3, r0
 8001116:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001118:	197b      	adds	r3, r7, r5
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d046      	beq.n	80011ae <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001120:	197b      	adds	r3, r7, r5
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	e280      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	2b00      	cmp	r3, #0
 800112a:	d027      	beq.n	800117c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800112c:	4b51      	ldr	r3, [pc, #324]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2209      	movs	r2, #9
 8001132:	4393      	bics	r3, r2
 8001134:	0019      	movs	r1, r3
 8001136:	4b4f      	ldr	r3, [pc, #316]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8001138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fc7f 	bl	8000a40 <HAL_GetTick>
 8001142:	0003      	movs	r3, r0
 8001144:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff fc7a 	bl	8000a40 <HAL_GetTick>
 800114c:	0002      	movs	r2, r0
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e266      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2204      	movs	r2, #4
 8001160:	4013      	ands	r3, r2
 8001162:	d0f1      	beq.n	8001148 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b43      	ldr	r3, [pc, #268]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a45      	ldr	r2, [pc, #276]	; (8001280 <HAL_RCC_OscConfig+0x344>)
 800116a:	4013      	ands	r3, r2
 800116c:	0019      	movs	r1, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	021a      	lsls	r2, r3, #8
 8001174:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8001176:	430a      	orrs	r2, r1
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	e018      	b.n	80011ae <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117c:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8001182:	2101      	movs	r1, #1
 8001184:	438a      	bics	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc5a 	bl	8000a40 <HAL_GetTick>
 800118c:	0003      	movs	r3, r0
 800118e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fc55 	bl	8000a40 <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e241      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2204      	movs	r2, #4
 80011aa:	4013      	ands	r3, r2
 80011ac:	d1f1      	bne.n	8001192 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2210      	movs	r2, #16
 80011b4:	4013      	ands	r3, r2
 80011b6:	d100      	bne.n	80011ba <HAL_RCC_OscConfig+0x27e>
 80011b8:	e0a1      	b.n	80012fe <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d140      	bne.n	8001242 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c0:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4013      	ands	r3, r2
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_OscConfig+0x29c>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e227      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a2c      	ldr	r2, [pc, #176]	; (8001290 <HAL_RCC_OscConfig+0x354>)
 80011de:	4013      	ands	r3, r2
 80011e0:	0019      	movs	r1, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1a      	ldr	r2, [r3, #32]
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80011e8:	430a      	orrs	r2, r1
 80011ea:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ec:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	0a19      	lsrs	r1, r3, #8
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	061a      	lsls	r2, r3, #24
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 80011fc:	430a      	orrs	r2, r1
 80011fe:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	0b5b      	lsrs	r3, r3, #13
 8001206:	3301      	adds	r3, #1
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	0212      	lsls	r2, r2, #8
 800120c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	210f      	movs	r1, #15
 8001216:	400b      	ands	r3, r1
 8001218:	491a      	ldr	r1, [pc, #104]	; (8001284 <HAL_RCC_OscConfig+0x348>)
 800121a:	5ccb      	ldrb	r3, [r1, r3]
 800121c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_RCC_OscConfig+0x34c>)
 8001220:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_RCC_OscConfig+0x350>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2513      	movs	r5, #19
 8001228:	197c      	adds	r4, r7, r5
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff fbc2 	bl	80009b4 <HAL_InitTick>
 8001230:	0003      	movs	r3, r0
 8001232:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001234:	197b      	adds	r3, r7, r5
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d060      	beq.n	80012fe <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800123c:	197b      	adds	r3, r7, r5
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	e1f2      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d03f      	beq.n	80012ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8001250:	2180      	movs	r1, #128	; 0x80
 8001252:	0049      	lsls	r1, r1, #1
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fbf2 	bl	8000a40 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001260:	e018      	b.n	8001294 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001262:	f7ff fbed 	bl	8000a40 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d911      	bls.n	8001294 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e1d9      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
 8001274:	40021000 	.word	0x40021000
 8001278:	fffeffff 	.word	0xfffeffff
 800127c:	fffbffff 	.word	0xfffbffff
 8001280:	ffffe0ff 	.word	0xffffe0ff
 8001284:	08002624 	.word	0x08002624
 8001288:	20000000 	.word	0x20000000
 800128c:	20000004 	.word	0x20000004
 8001290:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001294:	4bc9      	ldr	r3, [pc, #804]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4013      	ands	r3, r2
 800129e:	d0e0      	beq.n	8001262 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a0:	4bc6      	ldr	r3, [pc, #792]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4ac6      	ldr	r2, [pc, #792]	; (80015c0 <HAL_RCC_OscConfig+0x684>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	0019      	movs	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a1a      	ldr	r2, [r3, #32]
 80012ae:	4bc3      	ldr	r3, [pc, #780]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80012b0:	430a      	orrs	r2, r1
 80012b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b4:	4bc1      	ldr	r3, [pc, #772]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	0a19      	lsrs	r1, r3, #8
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	061a      	lsls	r2, r3, #24
 80012c2:	4bbe      	ldr	r3, [pc, #760]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80012c4:	430a      	orrs	r2, r1
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	e019      	b.n	80012fe <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012ca:	4bbc      	ldr	r3, [pc, #752]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4bbb      	ldr	r3, [pc, #748]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80012d0:	49bc      	ldr	r1, [pc, #752]	; (80015c4 <HAL_RCC_OscConfig+0x688>)
 80012d2:	400a      	ands	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff fbb3 	bl	8000a40 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e0:	f7ff fbae 	bl	8000a40 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e19a      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012f2:	4bb2      	ldr	r3, [pc, #712]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4013      	ands	r3, r2
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2208      	movs	r2, #8
 8001304:	4013      	ands	r3, r2
 8001306:	d036      	beq.n	8001376 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d019      	beq.n	8001344 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001310:	4baa      	ldr	r3, [pc, #680]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001314:	4ba9      	ldr	r3, [pc, #676]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001316:	2101      	movs	r1, #1
 8001318:	430a      	orrs	r2, r1
 800131a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff fb90 	bl	8000a40 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001326:	f7ff fb8b 	bl	8000a40 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e177      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001338:	4ba0      	ldr	r3, [pc, #640]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800133a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800133c:	2202      	movs	r2, #2
 800133e:	4013      	ands	r3, r2
 8001340:	d0f1      	beq.n	8001326 <HAL_RCC_OscConfig+0x3ea>
 8001342:	e018      	b.n	8001376 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001344:	4b9d      	ldr	r3, [pc, #628]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001348:	4b9c      	ldr	r3, [pc, #624]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800134a:	2101      	movs	r1, #1
 800134c:	438a      	bics	r2, r1
 800134e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001350:	f7ff fb76 	bl	8000a40 <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135a:	f7ff fb71 	bl	8000a40 <HAL_GetTick>
 800135e:	0002      	movs	r2, r0
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e15d      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800136c:	4b93      	ldr	r3, [pc, #588]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800136e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d1f1      	bne.n	800135a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2204      	movs	r2, #4
 800137c:	4013      	ands	r3, r2
 800137e:	d100      	bne.n	8001382 <HAL_RCC_OscConfig+0x446>
 8001380:	e0ae      	b.n	80014e0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001382:	2023      	movs	r0, #35	; 0x23
 8001384:	183b      	adds	r3, r7, r0
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138a:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800138c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	055b      	lsls	r3, r3, #21
 8001392:	4013      	ands	r3, r2
 8001394:	d109      	bne.n	80013aa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b89      	ldr	r3, [pc, #548]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800139a:	4b88      	ldr	r3, [pc, #544]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	0549      	lsls	r1, r1, #21
 80013a0:	430a      	orrs	r2, r1
 80013a2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80013a4:	183b      	adds	r3, r7, r0
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013aa:	4b87      	ldr	r3, [pc, #540]	; (80015c8 <HAL_RCC_OscConfig+0x68c>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	d11a      	bne.n	80013ec <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b6:	4b84      	ldr	r3, [pc, #528]	; (80015c8 <HAL_RCC_OscConfig+0x68c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b83      	ldr	r3, [pc, #524]	; (80015c8 <HAL_RCC_OscConfig+0x68c>)
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	0049      	lsls	r1, r1, #1
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fb3c 	bl	8000a40 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ce:	f7ff fb37 	bl	8000a40 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b64      	cmp	r3, #100	; 0x64
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e123      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	4b79      	ldr	r3, [pc, #484]	; (80015c8 <HAL_RCC_OscConfig+0x68c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4013      	ands	r3, r2
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d107      	bne.n	8001408 <HAL_RCC_OscConfig+0x4cc>
 80013f8:	4b70      	ldr	r3, [pc, #448]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80013fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013fc:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	0049      	lsls	r1, r1, #1
 8001402:	430a      	orrs	r2, r1
 8001404:	651a      	str	r2, [r3, #80]	; 0x50
 8001406:	e031      	b.n	800146c <HAL_RCC_OscConfig+0x530>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10c      	bne.n	800142a <HAL_RCC_OscConfig+0x4ee>
 8001410:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001414:	4b69      	ldr	r3, [pc, #420]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001416:	496b      	ldr	r1, [pc, #428]	; (80015c4 <HAL_RCC_OscConfig+0x688>)
 8001418:	400a      	ands	r2, r1
 800141a:	651a      	str	r2, [r3, #80]	; 0x50
 800141c:	4b67      	ldr	r3, [pc, #412]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800141e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001420:	4b66      	ldr	r3, [pc, #408]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001422:	496a      	ldr	r1, [pc, #424]	; (80015cc <HAL_RCC_OscConfig+0x690>)
 8001424:	400a      	ands	r2, r1
 8001426:	651a      	str	r2, [r3, #80]	; 0x50
 8001428:	e020      	b.n	800146c <HAL_RCC_OscConfig+0x530>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	23a0      	movs	r3, #160	; 0xa0
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	429a      	cmp	r2, r3
 8001434:	d10e      	bne.n	8001454 <HAL_RCC_OscConfig+0x518>
 8001436:	4b61      	ldr	r3, [pc, #388]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800143a:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	00c9      	lsls	r1, r1, #3
 8001440:	430a      	orrs	r2, r1
 8001442:	651a      	str	r2, [r3, #80]	; 0x50
 8001444:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001448:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	0049      	lsls	r1, r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	651a      	str	r2, [r3, #80]	; 0x50
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0x530>
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001458:	4b58      	ldr	r3, [pc, #352]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800145a:	495a      	ldr	r1, [pc, #360]	; (80015c4 <HAL_RCC_OscConfig+0x688>)
 800145c:	400a      	ands	r2, r1
 800145e:	651a      	str	r2, [r3, #80]	; 0x50
 8001460:	4b56      	ldr	r3, [pc, #344]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001462:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001464:	4b55      	ldr	r3, [pc, #340]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001466:	4959      	ldr	r1, [pc, #356]	; (80015cc <HAL_RCC_OscConfig+0x690>)
 8001468:	400a      	ands	r2, r1
 800146a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d015      	beq.n	80014a0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff fae4 	bl	8000a40 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800147c:	e009      	b.n	8001492 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147e:	f7ff fadf 	bl	8000a40 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4a51      	ldr	r2, [pc, #324]	; (80015d0 <HAL_RCC_OscConfig+0x694>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e0ca      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001492:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4013      	ands	r3, r2
 800149c:	d0ef      	beq.n	800147e <HAL_RCC_OscConfig+0x542>
 800149e:	e014      	b.n	80014ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff face 	bl	8000a40 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014a8:	e009      	b.n	80014be <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fac9 	bl	8000a40 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	4a46      	ldr	r2, [pc, #280]	; (80015d0 <HAL_RCC_OscConfig+0x694>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0b4      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80014c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4013      	ands	r3, r2
 80014c8:	d1ef      	bne.n	80014aa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014ca:	2323      	movs	r3, #35	; 0x23
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80014d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014d8:	4b38      	ldr	r3, [pc, #224]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80014da:	493e      	ldr	r1, [pc, #248]	; (80015d4 <HAL_RCC_OscConfig+0x698>)
 80014dc:	400a      	ands	r2, r1
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d100      	bne.n	80014ea <HAL_RCC_OscConfig+0x5ae>
 80014e8:	e09d      	b.n	8001626 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	2b0c      	cmp	r3, #12
 80014ee:	d100      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5b6>
 80014f0:	e076      	b.n	80015e0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d145      	bne.n	8001586 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001500:	4935      	ldr	r1, [pc, #212]	; (80015d8 <HAL_RCC_OscConfig+0x69c>)
 8001502:	400a      	ands	r2, r1
 8001504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fa9b 	bl	8000a40 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fa96 	bl	8000a40 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e082      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	049b      	lsls	r3, r3, #18
 800152a:	4013      	ands	r3, r2
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	4a2a      	ldr	r2, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x6a0>)
 8001534:	4013      	ands	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	431a      	orrs	r2, r3
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800154a:	430a      	orrs	r2, r1
 800154c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	0449      	lsls	r1, r1, #17
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fa70 	bl	8000a40 <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fa6b 	bl	8000a40 <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e057      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	049b      	lsls	r3, r3, #18
 8001580:	4013      	ands	r3, r2
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x62a>
 8001584:	e04f      	b.n	8001626 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 800158c:	4912      	ldr	r1, [pc, #72]	; (80015d8 <HAL_RCC_OscConfig+0x69c>)
 800158e:	400a      	ands	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff fa55 	bl	8000a40 <HAL_GetTick>
 8001596:	0003      	movs	r3, r0
 8001598:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fa50 	bl	8000a40 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e03c      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015ae:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_RCC_OscConfig+0x680>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	049b      	lsls	r3, r3, #18
 80015b6:	4013      	ands	r3, r2
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x660>
 80015ba:	e034      	b.n	8001626 <HAL_RCC_OscConfig+0x6ea>
 80015bc:	40021000 	.word	0x40021000
 80015c0:	ffff1fff 	.word	0xffff1fff
 80015c4:	fffffeff 	.word	0xfffffeff
 80015c8:	40007000 	.word	0x40007000
 80015cc:	fffffbff 	.word	0xfffffbff
 80015d0:	00001388 	.word	0x00001388
 80015d4:	efffffff 	.word	0xefffffff
 80015d8:	feffffff 	.word	0xfeffffff
 80015dc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_RCC_OscConfig+0x6f4>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	025b      	lsls	r3, r3, #9
 80015f8:	401a      	ands	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	429a      	cmp	r2, r3
 8001600:	d10f      	bne.n	8001622 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	23f0      	movs	r3, #240	; 0xf0
 8001606:	039b      	lsls	r3, r3, #14
 8001608:	401a      	ands	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d107      	bne.n	8001622 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	23c0      	movs	r3, #192	; 0xc0
 8001616:	041b      	lsls	r3, r3, #16
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b00a      	add	sp, #40	; 0x28
 800162e:	bdb0      	pop	{r4, r5, r7, pc}
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e128      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b96      	ldr	r3, [pc, #600]	; (80018a4 <HAL_RCC_ClockConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d91e      	bls.n	8001694 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b93      	ldr	r3, [pc, #588]	; (80018a4 <HAL_RCC_ClockConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	4393      	bics	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	4b90      	ldr	r3, [pc, #576]	; (80018a4 <HAL_RCC_ClockConfig+0x270>)
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001668:	f7ff f9ea 	bl	8000a40 <HAL_GetTick>
 800166c:	0003      	movs	r3, r0
 800166e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001670:	e009      	b.n	8001686 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001672:	f7ff f9e5 	bl	8000a40 <HAL_GetTick>
 8001676:	0002      	movs	r2, r0
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	4a8a      	ldr	r2, [pc, #552]	; (80018a8 <HAL_RCC_ClockConfig+0x274>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e109      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b87      	ldr	r3, [pc, #540]	; (80018a4 <HAL_RCC_ClockConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2201      	movs	r2, #1
 800168c:	4013      	ands	r3, r2
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d1ee      	bne.n	8001672 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2202      	movs	r2, #2
 800169a:	4013      	ands	r3, r2
 800169c:	d009      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169e:	4b83      	ldr	r3, [pc, #524]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	22f0      	movs	r2, #240	; 0xf0
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	4b7f      	ldr	r3, [pc, #508]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCC_ClockConfig+0x8a>
 80016bc:	e089      	b.n	80017d2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016c6:	4b79      	ldr	r3, [pc, #484]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	029b      	lsls	r3, r3, #10
 80016ce:	4013      	ands	r3, r2
 80016d0:	d120      	bne.n	8001714 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0e1      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016de:	4b73      	ldr	r3, [pc, #460]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	049b      	lsls	r3, r3, #18
 80016e6:	4013      	ands	r3, r2
 80016e8:	d114      	bne.n	8001714 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0d5      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d106      	bne.n	8001704 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016f6:	4b6d      	ldr	r3, [pc, #436]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2204      	movs	r2, #4
 80016fc:	4013      	ands	r3, r2
 80016fe:	d109      	bne.n	8001714 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0ca      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001704:	4b69      	ldr	r3, [pc, #420]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0c2      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001714:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2203      	movs	r2, #3
 800171a:	4393      	bics	r3, r2
 800171c:	0019      	movs	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 8001724:	430a      	orrs	r2, r1
 8001726:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7ff f98a 	bl	8000a40 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d111      	bne.n	800175c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001738:	e009      	b.n	800174e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173a:	f7ff f981 	bl	8000a40 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <HAL_RCC_ClockConfig+0x274>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e0a5      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800174e:	4b57      	ldr	r3, [pc, #348]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	220c      	movs	r2, #12
 8001754:	4013      	ands	r3, r2
 8001756:	2b08      	cmp	r3, #8
 8001758:	d1ef      	bne.n	800173a <HAL_RCC_ClockConfig+0x106>
 800175a:	e03a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d111      	bne.n	8001788 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001764:	e009      	b.n	800177a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001766:	f7ff f96b 	bl	8000a40 <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	4a4d      	ldr	r2, [pc, #308]	; (80018a8 <HAL_RCC_ClockConfig+0x274>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e08f      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177a:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	220c      	movs	r2, #12
 8001780:	4013      	ands	r3, r2
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d1ef      	bne.n	8001766 <HAL_RCC_ClockConfig+0x132>
 8001786:	e024      	b.n	80017d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d11b      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001790:	e009      	b.n	80017a6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001792:	f7ff f955 	bl	8000a40 <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	4a42      	ldr	r2, [pc, #264]	; (80018a8 <HAL_RCC_ClockConfig+0x274>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e079      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	220c      	movs	r2, #12
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d1ef      	bne.n	8001792 <HAL_RCC_ClockConfig+0x15e>
 80017b2:	e00e      	b.n	80017d2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff f944 	bl	8000a40 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	4a3a      	ldr	r2, [pc, #232]	; (80018a8 <HAL_RCC_ClockConfig+0x274>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e068      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017c8:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	220c      	movs	r2, #12
 80017ce:	4013      	ands	r3, r2
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <HAL_RCC_ClockConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d21e      	bcs.n	800181e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_RCC_ClockConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4393      	bics	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <HAL_RCC_ClockConfig+0x270>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017f2:	f7ff f925 	bl	8000a40 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	e009      	b.n	8001810 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fc:	f7ff f920 	bl	8000a40 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <HAL_RCC_ClockConfig+0x274>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e044      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_RCC_ClockConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d1ee      	bne.n	80017fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2204      	movs	r2, #4
 8001824:	4013      	ands	r3, r2
 8001826:	d009      	beq.n	800183c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x27c>)
 800182e:	4013      	ands	r3, r2
 8001830:	0019      	movs	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 8001838:	430a      	orrs	r2, r1
 800183a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2208      	movs	r2, #8
 8001842:	4013      	ands	r3, r2
 8001844:	d00a      	beq.n	800185c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <HAL_RCC_ClockConfig+0x280>)
 800184c:	4013      	ands	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	00da      	lsls	r2, r3, #3
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 8001858:	430a      	orrs	r2, r1
 800185a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800185c:	f000 f832 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001860:	0001      	movs	r1, r0
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x278>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	220f      	movs	r2, #15
 800186a:	4013      	ands	r3, r2
 800186c:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <HAL_RCC_ClockConfig+0x284>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	000a      	movs	r2, r1
 8001872:	40da      	lsrs	r2, r3
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_RCC_ClockConfig+0x288>)
 8001876:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_RCC_ClockConfig+0x28c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	250b      	movs	r5, #11
 800187e:	197c      	adds	r4, r7, r5
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff f897 	bl	80009b4 <HAL_InitTick>
 8001886:	0003      	movs	r3, r0
 8001888:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800188a:	197b      	adds	r3, r7, r5
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001892:	197b      	adds	r3, r7, r5
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	e000      	b.n	800189a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b004      	add	sp, #16
 80018a0:	bdb0      	pop	{r4, r5, r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	40022000 	.word	0x40022000
 80018a8:	00001388 	.word	0x00001388
 80018ac:	40021000 	.word	0x40021000
 80018b0:	fffff8ff 	.word	0xfffff8ff
 80018b4:	ffffc7ff 	.word	0xffffc7ff
 80018b8:	08002624 	.word	0x08002624
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b08e      	sub	sp, #56	; 0x38
 80018c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018ca:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <HAL_RCC_GetSysClockFreq+0x138>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d2:	230c      	movs	r3, #12
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d014      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x40>
 80018da:	d900      	bls.n	80018de <HAL_RCC_GetSysClockFreq+0x1a>
 80018dc:	e07b      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x112>
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d002      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x24>
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x3a>
 80018e6:	e076      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018e8:	4b44      	ldr	r3, [pc, #272]	; (80019fc <HAL_RCC_GetSysClockFreq+0x138>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2210      	movs	r2, #16
 80018ee:	4013      	ands	r3, r2
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018f2:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018f6:	e07c      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x140>)
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018fc:	e079      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018fe:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x144>)
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001902:	e076      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	0c9a      	lsrs	r2, r3, #18
 8001908:	230f      	movs	r3, #15
 800190a:	401a      	ands	r2, r3
 800190c:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x148>)
 800190e:	5c9b      	ldrb	r3, [r3, r2]
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	0d9a      	lsrs	r2, r3, #22
 8001916:	2303      	movs	r3, #3
 8001918:	4013      	ands	r3, r2
 800191a:	3301      	adds	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_RCC_GetSysClockFreq+0x138>)
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	025b      	lsls	r3, r3, #9
 8001926:	4013      	ands	r3, r2
 8001928:	d01a      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	4a35      	ldr	r2, [pc, #212]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x144>)
 8001934:	2300      	movs	r3, #0
 8001936:	69b8      	ldr	r0, [r7, #24]
 8001938:	69f9      	ldr	r1, [r7, #28]
 800193a:	f7fe fc91 	bl	8000260 <__aeabi_lmul>
 800193e:	0002      	movs	r2, r0
 8001940:	000b      	movs	r3, r1
 8001942:	0010      	movs	r0, r2
 8001944:	0019      	movs	r1, r3
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f7fe fc65 	bl	8000220 <__aeabi_uldivmod>
 8001956:	0002      	movs	r2, r0
 8001958:	000b      	movs	r3, r1
 800195a:	0013      	movs	r3, r2
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
 800195e:	e037      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_RCC_GetSysClockFreq+0x138>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	4013      	ands	r3, r2
 8001968:	d01a      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001974:	2300      	movs	r3, #0
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	f7fe fc71 	bl	8000260 <__aeabi_lmul>
 800197e:	0002      	movs	r2, r0
 8001980:	000b      	movs	r3, r1
 8001982:	0010      	movs	r0, r2
 8001984:	0019      	movs	r1, r3
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f7fe fc45 	bl	8000220 <__aeabi_uldivmod>
 8001996:	0002      	movs	r2, r0
 8001998:	000b      	movs	r3, r1
 800199a:	0013      	movs	r3, r2
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
 800199e:	e017      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	0018      	movs	r0, r3
 80019a4:	2300      	movs	r3, #0
 80019a6:	0019      	movs	r1, r3
 80019a8:	4a16      	ldr	r2, [pc, #88]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x140>)
 80019aa:	2300      	movs	r3, #0
 80019ac:	f7fe fc58 	bl	8000260 <__aeabi_lmul>
 80019b0:	0002      	movs	r2, r0
 80019b2:	000b      	movs	r3, r1
 80019b4:	0010      	movs	r0, r2
 80019b6:	0019      	movs	r1, r3
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	001c      	movs	r4, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	001d      	movs	r5, r3
 80019c0:	0022      	movs	r2, r4
 80019c2:	002b      	movs	r3, r5
 80019c4:	f7fe fc2c 	bl	8000220 <__aeabi_uldivmod>
 80019c8:	0002      	movs	r2, r0
 80019ca:	000b      	movs	r3, r1
 80019cc:	0013      	movs	r3, r2
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80019d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019d4:	e00d      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_GetSysClockFreq+0x138>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	0b5b      	lsrs	r3, r3, #13
 80019dc:	2207      	movs	r2, #7
 80019de:	4013      	ands	r3, r2
 80019e0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	3301      	adds	r3, #1
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	0212      	lsls	r2, r2, #8
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019f0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b00e      	add	sp, #56	; 0x38
 80019fa:	bdb0      	pop	{r4, r5, r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	003d0900 	.word	0x003d0900
 8001a04:	00f42400 	.word	0x00f42400
 8001a08:	007a1200 	.word	0x007a1200
 8001a0c:	0800263c 	.word	0x0800263c

08001a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	20000000 	.word	0x20000000

08001a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a28:	f7ff fff2 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a2c:	0001      	movs	r1, r0
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	2207      	movs	r2, #7
 8001a36:	4013      	ands	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	40d9      	lsrs	r1, r3
 8001a3e:	000b      	movs	r3, r1
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	08002634 	.word	0x08002634

08001a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a54:	f7ff ffdc 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a58:	0001      	movs	r1, r0
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	0adb      	lsrs	r3, r3, #11
 8001a60:	2207      	movs	r2, #7
 8001a62:	4013      	ands	r3, r2
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	40d9      	lsrs	r1, r3
 8001a6a:	000b      	movs	r3, r1
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08002634 	.word	0x08002634

08001a7c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001a84:	2017      	movs	r0, #23
 8001a86:	183b      	adds	r3, r7, r0
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2220      	movs	r2, #32
 8001a92:	4013      	ands	r3, r2
 8001a94:	d100      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001a96:	e0c2      	b.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a98:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	055b      	lsls	r3, r3, #21
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d109      	bne.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b7e      	ldr	r3, [pc, #504]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa8:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	0549      	lsls	r1, r1, #21
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ab2:	183b      	adds	r3, r7, r0
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	4b7a      	ldr	r3, [pc, #488]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d11a      	bne.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac4:	4b77      	ldr	r3, [pc, #476]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b76      	ldr	r3, [pc, #472]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	0049      	lsls	r1, r1, #1
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7fe ffb5 	bl	8000a40 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	e008      	b.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001adc:	f7fe ffb0 	bl	8000a40 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0d4      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001afa:	4b69      	ldr	r3, [pc, #420]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	23c0      	movs	r3, #192	; 0xc0
 8001b00:	039b      	lsls	r3, r3, #14
 8001b02:	4013      	ands	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	23c0      	movs	r3, #192	; 0xc0
 8001b0c:	039b      	lsls	r3, r3, #14
 8001b0e:	4013      	ands	r3, r2
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d013      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	23c0      	movs	r3, #192	; 0xc0
 8001b1c:	029b      	lsls	r3, r3, #10
 8001b1e:	401a      	ands	r2, r3
 8001b20:	23c0      	movs	r3, #192	; 0xc0
 8001b22:	029b      	lsls	r3, r3, #10
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d10a      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b28:	4b5d      	ldr	r3, [pc, #372]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	029b      	lsls	r3, r3, #10
 8001b30:	401a      	ands	r2, r3
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	029b      	lsls	r3, r3, #10
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d101      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0ac      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b3e:	4b58      	ldr	r3, [pc, #352]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b42:	23c0      	movs	r3, #192	; 0xc0
 8001b44:	029b      	lsls	r3, r3, #10
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d03b      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	23c0      	movs	r3, #192	; 0xc0
 8001b56:	029b      	lsls	r3, r3, #10
 8001b58:	4013      	ands	r3, r2
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d033      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2220      	movs	r2, #32
 8001b66:	4013      	ands	r3, r2
 8001b68:	d02e      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6e:	4a4e      	ldr	r2, [pc, #312]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b74:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b78:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	0309      	lsls	r1, r1, #12
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b86:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b88:	4948      	ldr	r1, [pc, #288]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001b8e:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d014      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7fe ff4f 	bl	8000a40 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ba6:	e009      	b.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7fe ff4a 	bl	8000a40 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	4a3f      	ldr	r2, [pc, #252]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e06d      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bbc:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d0ef      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	23c0      	movs	r3, #192	; 0xc0
 8001bce:	029b      	lsls	r3, r3, #10
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	23c0      	movs	r3, #192	; 0xc0
 8001bd4:	029b      	lsls	r3, r3, #10
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001bda:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a35      	ldr	r2, [pc, #212]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	23c0      	movs	r3, #192	; 0xc0
 8001bea:	039b      	lsls	r3, r3, #14
 8001bec:	401a      	ands	r2, r3
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bf6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	23c0      	movs	r3, #192	; 0xc0
 8001bfe:	029b      	lsls	r3, r3, #10
 8001c00:	401a      	ands	r2, r3
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c08:	2317      	movs	r3, #23
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c18:	4927      	ldr	r1, [pc, #156]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d009      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2c:	220c      	movs	r2, #12
 8001c2e:	4393      	bics	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2204      	movs	r2, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	d009      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2208      	movs	r2, #8
 8001c60:	4013      	ands	r3, r2
 8001c62:	d009      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d009      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c92:	430a      	orrs	r2, r1
 8001c94:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b006      	add	sp, #24
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	fffcffff 	.word	0xfffcffff
 8001cac:	fff7ffff 	.word	0xfff7ffff
 8001cb0:	00001388 	.word	0x00001388
 8001cb4:	ffcfffff 	.word	0xffcfffff
 8001cb8:	efffffff 	.word	0xefffffff
 8001cbc:	fffff3ff 	.word	0xfffff3ff
 8001cc0:	ffffcfff 	.word	0xffffcfff
 8001cc4:	fff3ffff 	.word	0xfff3ffff

08001cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e044      	b.n	8001d64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2274      	movs	r2, #116	; 0x74
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7fe fd9f 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2224      	movs	r2, #36	; 0x24
 8001cf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	438a      	bics	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 f830 	bl	8001d70 <UART_SetConfig>
 8001d10:	0003      	movs	r3, r0
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e024      	b.n	8001d64 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f000 fa85 	bl	8002234 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	490d      	ldr	r1, [pc, #52]	; (8001d6c <HAL_UART_Init+0xa4>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	212a      	movs	r1, #42	; 0x2a
 8001d46:	438a      	bics	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 fb1d 	bl	800239c <UART_CheckIdleState>
 8001d62:	0003      	movs	r3, r0
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	ffffb7ff 	.word	0xffffb7ff

08001d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b08e      	sub	sp, #56	; 0x38
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d78:	231a      	movs	r3, #26
 8001d7a:	2218      	movs	r2, #24
 8001d7c:	4694      	mov	ip, r2
 8001d7e:	44bc      	add	ip, r7
 8001d80:	4463      	add	r3, ip
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4abc      	ldr	r2, [pc, #752]	; (8002098 <UART_SetConfig+0x328>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4ab8      	ldr	r2, [pc, #736]	; (800209c <UART_SetConfig+0x32c>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4ab2      	ldr	r2, [pc, #712]	; (80020a0 <UART_SetConfig+0x330>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001de2:	4313      	orrs	r3, r2
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4aad      	ldr	r2, [pc, #692]	; (80020a4 <UART_SetConfig+0x334>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4aa9      	ldr	r2, [pc, #676]	; (80020a8 <UART_SetConfig+0x338>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d136      	bne.n	8001e74 <UART_SetConfig+0x104>
 8001e06:	4ba9      	ldr	r3, [pc, #676]	; (80020ac <UART_SetConfig+0x33c>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d020      	beq.n	8001e54 <UART_SetConfig+0xe4>
 8001e12:	d827      	bhi.n	8001e64 <UART_SetConfig+0xf4>
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d00d      	beq.n	8001e34 <UART_SetConfig+0xc4>
 8001e18:	d824      	bhi.n	8001e64 <UART_SetConfig+0xf4>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <UART_SetConfig+0xb4>
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d010      	beq.n	8001e44 <UART_SetConfig+0xd4>
 8001e22:	e01f      	b.n	8001e64 <UART_SetConfig+0xf4>
 8001e24:	231b      	movs	r3, #27
 8001e26:	2218      	movs	r2, #24
 8001e28:	4694      	mov	ip, r2
 8001e2a:	44bc      	add	ip, r7
 8001e2c:	4463      	add	r3, ip
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e06f      	b.n	8001f14 <UART_SetConfig+0x1a4>
 8001e34:	231b      	movs	r3, #27
 8001e36:	2218      	movs	r2, #24
 8001e38:	4694      	mov	ip, r2
 8001e3a:	44bc      	add	ip, r7
 8001e3c:	4463      	add	r3, ip
 8001e3e:	2202      	movs	r2, #2
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e067      	b.n	8001f14 <UART_SetConfig+0x1a4>
 8001e44:	231b      	movs	r3, #27
 8001e46:	2218      	movs	r2, #24
 8001e48:	4694      	mov	ip, r2
 8001e4a:	44bc      	add	ip, r7
 8001e4c:	4463      	add	r3, ip
 8001e4e:	2204      	movs	r2, #4
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	e05f      	b.n	8001f14 <UART_SetConfig+0x1a4>
 8001e54:	231b      	movs	r3, #27
 8001e56:	2218      	movs	r2, #24
 8001e58:	4694      	mov	ip, r2
 8001e5a:	44bc      	add	ip, r7
 8001e5c:	4463      	add	r3, ip
 8001e5e:	2208      	movs	r2, #8
 8001e60:	701a      	strb	r2, [r3, #0]
 8001e62:	e057      	b.n	8001f14 <UART_SetConfig+0x1a4>
 8001e64:	231b      	movs	r3, #27
 8001e66:	2218      	movs	r2, #24
 8001e68:	4694      	mov	ip, r2
 8001e6a:	44bc      	add	ip, r7
 8001e6c:	4463      	add	r3, ip
 8001e6e:	2210      	movs	r2, #16
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e04f      	b.n	8001f14 <UART_SetConfig+0x1a4>
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a89      	ldr	r2, [pc, #548]	; (80020a0 <UART_SetConfig+0x330>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d143      	bne.n	8001f06 <UART_SetConfig+0x196>
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	; (80020ac <UART_SetConfig+0x33c>)
 8001e80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e82:	23c0      	movs	r3, #192	; 0xc0
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	4013      	ands	r3, r2
 8001e88:	22c0      	movs	r2, #192	; 0xc0
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d02a      	beq.n	8001ee6 <UART_SetConfig+0x176>
 8001e90:	22c0      	movs	r2, #192	; 0xc0
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d82e      	bhi.n	8001ef6 <UART_SetConfig+0x186>
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d012      	beq.n	8001ec6 <UART_SetConfig+0x156>
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d826      	bhi.n	8001ef6 <UART_SetConfig+0x186>
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <UART_SetConfig+0x146>
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	00d2      	lsls	r2, r2, #3
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d010      	beq.n	8001ed6 <UART_SetConfig+0x166>
 8001eb4:	e01f      	b.n	8001ef6 <UART_SetConfig+0x186>
 8001eb6:	231b      	movs	r3, #27
 8001eb8:	2218      	movs	r2, #24
 8001eba:	4694      	mov	ip, r2
 8001ebc:	44bc      	add	ip, r7
 8001ebe:	4463      	add	r3, ip
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	e026      	b.n	8001f14 <UART_SetConfig+0x1a4>
 8001ec6:	231b      	movs	r3, #27
 8001ec8:	2218      	movs	r2, #24
 8001eca:	4694      	mov	ip, r2
 8001ecc:	44bc      	add	ip, r7
 8001ece:	4463      	add	r3, ip
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	e01e      	b.n	8001f14 <UART_SetConfig+0x1a4>
 8001ed6:	231b      	movs	r3, #27
 8001ed8:	2218      	movs	r2, #24
 8001eda:	4694      	mov	ip, r2
 8001edc:	44bc      	add	ip, r7
 8001ede:	4463      	add	r3, ip
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	e016      	b.n	8001f14 <UART_SetConfig+0x1a4>
 8001ee6:	231b      	movs	r3, #27
 8001ee8:	2218      	movs	r2, #24
 8001eea:	4694      	mov	ip, r2
 8001eec:	44bc      	add	ip, r7
 8001eee:	4463      	add	r3, ip
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	e00e      	b.n	8001f14 <UART_SetConfig+0x1a4>
 8001ef6:	231b      	movs	r3, #27
 8001ef8:	2218      	movs	r2, #24
 8001efa:	4694      	mov	ip, r2
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	2210      	movs	r2, #16
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e006      	b.n	8001f14 <UART_SetConfig+0x1a4>
 8001f06:	231b      	movs	r3, #27
 8001f08:	2218      	movs	r2, #24
 8001f0a:	4694      	mov	ip, r2
 8001f0c:	44bc      	add	ip, r7
 8001f0e:	4463      	add	r3, ip
 8001f10:	2210      	movs	r2, #16
 8001f12:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a61      	ldr	r2, [pc, #388]	; (80020a0 <UART_SetConfig+0x330>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d000      	beq.n	8001f20 <UART_SetConfig+0x1b0>
 8001f1e:	e088      	b.n	8002032 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001f20:	231b      	movs	r3, #27
 8001f22:	2218      	movs	r2, #24
 8001f24:	4694      	mov	ip, r2
 8001f26:	44bc      	add	ip, r7
 8001f28:	4463      	add	r3, ip
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d01d      	beq.n	8001f6c <UART_SetConfig+0x1fc>
 8001f30:	dc20      	bgt.n	8001f74 <UART_SetConfig+0x204>
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d015      	beq.n	8001f62 <UART_SetConfig+0x1f2>
 8001f36:	dc1d      	bgt.n	8001f74 <UART_SetConfig+0x204>
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <UART_SetConfig+0x1d2>
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d005      	beq.n	8001f4c <UART_SetConfig+0x1dc>
 8001f40:	e018      	b.n	8001f74 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f42:	f7ff fd6f 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8001f46:	0003      	movs	r3, r0
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001f4a:	e01d      	b.n	8001f88 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f4c:	4b57      	ldr	r3, [pc, #348]	; (80020ac <UART_SetConfig+0x33c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2210      	movs	r2, #16
 8001f52:	4013      	ands	r3, r2
 8001f54:	d002      	beq.n	8001f5c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001f56:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <UART_SetConfig+0x340>)
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8001f5a:	e015      	b.n	8001f88 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8001f5c:	4b55      	ldr	r3, [pc, #340]	; (80020b4 <UART_SetConfig+0x344>)
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001f60:	e012      	b.n	8001f88 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f62:	f7ff fcaf 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001f66:	0003      	movs	r3, r0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001f6a:	e00d      	b.n	8001f88 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001f72:	e009      	b.n	8001f88 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8001f78:	231a      	movs	r3, #26
 8001f7a:	2218      	movs	r2, #24
 8001f7c:	4694      	mov	ip, r2
 8001f7e:	44bc      	add	ip, r7
 8001f80:	4463      	add	r3, ip
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
        break;
 8001f86:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d100      	bne.n	8001f90 <UART_SetConfig+0x220>
 8001f8e:	e139      	b.n	8002204 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	0013      	movs	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	189b      	adds	r3, r3, r2
 8001f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d305      	bcc.n	8001fac <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d907      	bls.n	8001fbc <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8001fac:	231a      	movs	r3, #26
 8001fae:	2218      	movs	r2, #24
 8001fb0:	4694      	mov	ip, r2
 8001fb2:	44bc      	add	ip, r7
 8001fb4:	4463      	add	r3, ip
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
 8001fba:	e123      	b.n	8002204 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	6939      	ldr	r1, [r7, #16]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	000b      	movs	r3, r1
 8001fca:	0e1b      	lsrs	r3, r3, #24
 8001fcc:	0010      	movs	r0, r2
 8001fce:	0205      	lsls	r5, r0, #8
 8001fd0:	431d      	orrs	r5, r3
 8001fd2:	000b      	movs	r3, r1
 8001fd4:	021c      	lsls	r4, r3, #8
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68b8      	ldr	r0, [r7, #8]
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	1900      	adds	r0, r0, r4
 8001fe8:	4169      	adcs	r1, r5
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f7fe f912 	bl	8000220 <__aeabi_uldivmod>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	000b      	movs	r3, r1
 8002000:	0013      	movs	r3, r2
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002006:	23c0      	movs	r3, #192	; 0xc0
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	429a      	cmp	r2, r3
 800200c:	d309      	bcc.n	8002022 <UART_SetConfig+0x2b2>
 800200e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	035b      	lsls	r3, r3, #13
 8002014:	429a      	cmp	r2, r3
 8002016:	d204      	bcs.n	8002022 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	e0f0      	b.n	8002204 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002022:	231a      	movs	r3, #26
 8002024:	2218      	movs	r2, #24
 8002026:	4694      	mov	ip, r2
 8002028:	44bc      	add	ip, r7
 800202a:	4463      	add	r3, ip
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e0e8      	b.n	8002204 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	429a      	cmp	r2, r3
 800203c:	d000      	beq.n	8002040 <UART_SetConfig+0x2d0>
 800203e:	e087      	b.n	8002150 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8002040:	231b      	movs	r3, #27
 8002042:	2218      	movs	r2, #24
 8002044:	4694      	mov	ip, r2
 8002046:	44bc      	add	ip, r7
 8002048:	4463      	add	r3, ip
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d835      	bhi.n	80020bc <UART_SetConfig+0x34c>
 8002050:	009a      	lsls	r2, r3, #2
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <UART_SetConfig+0x348>)
 8002054:	18d3      	adds	r3, r2, r3
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800205a:	f7ff fce3 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 800205e:	0003      	movs	r3, r0
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002062:	e035      	b.n	80020d0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002064:	f7ff fcf4 	bl	8001a50 <HAL_RCC_GetPCLK2Freq>
 8002068:	0003      	movs	r3, r0
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800206c:	e030      	b.n	80020d0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <UART_SetConfig+0x33c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2210      	movs	r2, #16
 8002074:	4013      	ands	r3, r2
 8002076:	d002      	beq.n	800207e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <UART_SetConfig+0x340>)
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800207c:	e028      	b.n	80020d0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <UART_SetConfig+0x344>)
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002082:	e025      	b.n	80020d0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002084:	f7ff fc1e 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8002088:	0003      	movs	r3, r0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800208c:	e020      	b.n	80020d0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002094:	e01c      	b.n	80020d0 <UART_SetConfig+0x360>
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	efff69f3 	.word	0xefff69f3
 800209c:	ffffcfff 	.word	0xffffcfff
 80020a0:	40004800 	.word	0x40004800
 80020a4:	fffff4ff 	.word	0xfffff4ff
 80020a8:	40004400 	.word	0x40004400
 80020ac:	40021000 	.word	0x40021000
 80020b0:	003d0900 	.word	0x003d0900
 80020b4:	00f42400 	.word	0x00f42400
 80020b8:	08002648 	.word	0x08002648
      default:
        pclk = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80020c0:	231a      	movs	r3, #26
 80020c2:	2218      	movs	r2, #24
 80020c4:	4694      	mov	ip, r2
 80020c6:	44bc      	add	ip, r7
 80020c8:	4463      	add	r3, ip
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
        break;
 80020ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d100      	bne.n	80020d8 <UART_SetConfig+0x368>
 80020d6:	e095      	b.n	8002204 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	005a      	lsls	r2, r3, #1
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	18d2      	adds	r2, r2, r3
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	0019      	movs	r1, r3
 80020ea:	0010      	movs	r0, r2
 80020ec:	f7fe f80c 	bl	8000108 <__udivsi3>
 80020f0:	0003      	movs	r3, r0
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d921      	bls.n	8002140 <UART_SetConfig+0x3d0>
 80020fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	025b      	lsls	r3, r3, #9
 8002102:	429a      	cmp	r2, r3
 8002104:	d21c      	bcs.n	8002140 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	b29a      	uxth	r2, r3
 800210a:	200e      	movs	r0, #14
 800210c:	2418      	movs	r4, #24
 800210e:	193b      	adds	r3, r7, r4
 8002110:	181b      	adds	r3, r3, r0
 8002112:	210f      	movs	r1, #15
 8002114:	438a      	bics	r2, r1
 8002116:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	b29b      	uxth	r3, r3
 800211e:	2207      	movs	r2, #7
 8002120:	4013      	ands	r3, r2
 8002122:	b299      	uxth	r1, r3
 8002124:	193b      	adds	r3, r7, r4
 8002126:	181b      	adds	r3, r3, r0
 8002128:	193a      	adds	r2, r7, r4
 800212a:	1812      	adds	r2, r2, r0
 800212c:	8812      	ldrh	r2, [r2, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	193a      	adds	r2, r7, r4
 8002138:	1812      	adds	r2, r2, r0
 800213a:	8812      	ldrh	r2, [r2, #0]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	e061      	b.n	8002204 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002140:	231a      	movs	r3, #26
 8002142:	2218      	movs	r2, #24
 8002144:	4694      	mov	ip, r2
 8002146:	44bc      	add	ip, r7
 8002148:	4463      	add	r3, ip
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e059      	b.n	8002204 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002150:	231b      	movs	r3, #27
 8002152:	2218      	movs	r2, #24
 8002154:	4694      	mov	ip, r2
 8002156:	44bc      	add	ip, r7
 8002158:	4463      	add	r3, ip
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d822      	bhi.n	80021a6 <UART_SetConfig+0x436>
 8002160:	009a      	lsls	r2, r3, #2
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <UART_SetConfig+0x4b4>)
 8002164:	18d3      	adds	r3, r2, r3
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800216a:	f7ff fc5b 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 800216e:	0003      	movs	r3, r0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002172:	e022      	b.n	80021ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002174:	f7ff fc6c 	bl	8001a50 <HAL_RCC_GetPCLK2Freq>
 8002178:	0003      	movs	r3, r0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800217c:	e01d      	b.n	80021ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <UART_SetConfig+0x4b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2210      	movs	r2, #16
 8002184:	4013      	ands	r3, r2
 8002186:	d002      	beq.n	800218e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <UART_SetConfig+0x4bc>)
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800218c:	e015      	b.n	80021ba <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <UART_SetConfig+0x4c0>)
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002192:	e012      	b.n	80021ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002194:	f7ff fb96 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8002198:	0003      	movs	r3, r0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800219c:	e00d      	b.n	80021ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021a4:	e009      	b.n	80021ba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80021aa:	231a      	movs	r3, #26
 80021ac:	2218      	movs	r2, #24
 80021ae:	4694      	mov	ip, r2
 80021b0:	44bc      	add	ip, r7
 80021b2:	4463      	add	r3, ip
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
        break;
 80021b8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d021      	beq.n	8002204 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	085a      	lsrs	r2, r3, #1
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	18d2      	adds	r2, r2, r3
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0019      	movs	r1, r3
 80021d0:	0010      	movs	r0, r2
 80021d2:	f7fd ff99 	bl	8000108 <__udivsi3>
 80021d6:	0003      	movs	r3, r0
 80021d8:	b29b      	uxth	r3, r3
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	d909      	bls.n	80021f6 <UART_SetConfig+0x486>
 80021e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d204      	bcs.n	80021f6 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	e006      	b.n	8002204 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80021f6:	231a      	movs	r3, #26
 80021f8:	2218      	movs	r2, #24
 80021fa:	4694      	mov	ip, r2
 80021fc:	44bc      	add	ip, r7
 80021fe:	4463      	add	r3, ip
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2200      	movs	r2, #0
 8002208:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	2200      	movs	r2, #0
 800220e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002210:	231a      	movs	r3, #26
 8002212:	2218      	movs	r2, #24
 8002214:	4694      	mov	ip, r2
 8002216:	44bc      	add	ip, r7
 8002218:	4463      	add	r3, ip
 800221a:	781b      	ldrb	r3, [r3, #0]
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b00e      	add	sp, #56	; 0x38
 8002222:	bdb0      	pop	{r4, r5, r7, pc}
 8002224:	0800266c 	.word	0x0800266c
 8002228:	40021000 	.word	0x40021000
 800222c:	003d0900 	.word	0x003d0900
 8002230:	00f42400 	.word	0x00f42400

08002234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	2201      	movs	r2, #1
 8002242:	4013      	ands	r3, r2
 8002244:	d00b      	beq.n	800225e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <UART_AdvFeatureConfig+0x144>)
 800224e:	4013      	ands	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	2202      	movs	r2, #2
 8002264:	4013      	ands	r3, r2
 8002266:	d00b      	beq.n	8002280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a43      	ldr	r2, [pc, #268]	; (800237c <UART_AdvFeatureConfig+0x148>)
 8002270:	4013      	ands	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2204      	movs	r2, #4
 8002286:	4013      	ands	r3, r2
 8002288:	d00b      	beq.n	80022a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <UART_AdvFeatureConfig+0x14c>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	2208      	movs	r2, #8
 80022a8:	4013      	ands	r3, r2
 80022aa:	d00b      	beq.n	80022c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4a34      	ldr	r2, [pc, #208]	; (8002384 <UART_AdvFeatureConfig+0x150>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	2210      	movs	r2, #16
 80022ca:	4013      	ands	r3, r2
 80022cc:	d00b      	beq.n	80022e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a2c      	ldr	r2, [pc, #176]	; (8002388 <UART_AdvFeatureConfig+0x154>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	2220      	movs	r2, #32
 80022ec:	4013      	ands	r3, r2
 80022ee:	d00b      	beq.n	8002308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4a25      	ldr	r2, [pc, #148]	; (800238c <UART_AdvFeatureConfig+0x158>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	2240      	movs	r2, #64	; 0x40
 800230e:	4013      	ands	r3, r2
 8002310:	d01d      	beq.n	800234e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <UART_AdvFeatureConfig+0x15c>)
 800231a:	4013      	ands	r3, r2
 800231c:	0019      	movs	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	035b      	lsls	r3, r3, #13
 8002332:	429a      	cmp	r2, r3
 8002334:	d10b      	bne.n	800234e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a15      	ldr	r2, [pc, #84]	; (8002394 <UART_AdvFeatureConfig+0x160>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	2280      	movs	r2, #128	; 0x80
 8002354:	4013      	ands	r3, r2
 8002356:	d00b      	beq.n	8002370 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <UART_AdvFeatureConfig+0x164>)
 8002360:	4013      	ands	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	605a      	str	r2, [r3, #4]
  }
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b002      	add	sp, #8
 8002376:	bd80      	pop	{r7, pc}
 8002378:	fffdffff 	.word	0xfffdffff
 800237c:	fffeffff 	.word	0xfffeffff
 8002380:	fffbffff 	.word	0xfffbffff
 8002384:	ffff7fff 	.word	0xffff7fff
 8002388:	ffffefff 	.word	0xffffefff
 800238c:	ffffdfff 	.word	0xffffdfff
 8002390:	ffefffff 	.word	0xffefffff
 8002394:	ff9fffff 	.word	0xff9fffff
 8002398:	fff7ffff 	.word	0xfff7ffff

0800239c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	2100      	movs	r1, #0
 80023aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80023ac:	f7fe fb48 	bl	8000a40 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2208      	movs	r2, #8
 80023bc:	4013      	ands	r3, r2
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d10c      	bne.n	80023dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	0391      	lsls	r1, r2, #14
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4a17      	ldr	r2, [pc, #92]	; (8002428 <UART_CheckIdleState+0x8c>)
 80023cc:	9200      	str	r2, [sp, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f000 f82c 	bl	800242c <UART_WaitOnFlagUntilTimeout>
 80023d4:	1e03      	subs	r3, r0, #0
 80023d6:	d001      	beq.n	80023dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e021      	b.n	8002420 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2204      	movs	r2, #4
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d10c      	bne.n	8002404 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	03d1      	lsls	r1, r2, #15
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <UART_CheckIdleState+0x8c>)
 80023f4:	9200      	str	r2, [sp, #0]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f000 f818 	bl	800242c <UART_WaitOnFlagUntilTimeout>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d001      	beq.n	8002404 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e00d      	b.n	8002420 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2274      	movs	r2, #116	; 0x74
 800241a:	2100      	movs	r1, #0
 800241c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b004      	add	sp, #16
 8002426:	bd80      	pop	{r7, pc}
 8002428:	01ffffff 	.word	0x01ffffff

0800242c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b094      	sub	sp, #80	; 0x50
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	1dfb      	adds	r3, r7, #7
 800243a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243c:	e0a3      	b.n	8002586 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002440:	3301      	adds	r3, #1
 8002442:	d100      	bne.n	8002446 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002444:	e09f      	b.n	8002586 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002446:	f7fe fafb 	bl	8000a40 <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002452:	429a      	cmp	r2, r3
 8002454:	d302      	bcc.n	800245c <UART_WaitOnFlagUntilTimeout+0x30>
 8002456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002458:	2b00      	cmp	r3, #0
 800245a:	d13d      	bne.n	80024d8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800245c:	f3ef 8310 	mrs	r3, PRIMASK
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002464:	647b      	str	r3, [r7, #68]	; 0x44
 8002466:	2301      	movs	r3, #1
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	f383 8810 	msr	PRIMASK, r3
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	494c      	ldr	r1, [pc, #304]	; (80025b0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800247e:	400a      	ands	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002484:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	f383 8810 	msr	PRIMASK, r3
}
 800248c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248e:	f3ef 8310 	mrs	r3, PRIMASK
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002496:	643b      	str	r3, [r7, #64]	; 0x40
 8002498:	2301      	movs	r3, #1
 800249a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249e:	f383 8810 	msr	PRIMASK, r3
}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ba:	f383 8810 	msr	PRIMASK, r3
}
 80024be:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2274      	movs	r2, #116	; 0x74
 80024d0:	2100      	movs	r1, #0
 80024d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e067      	b.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2204      	movs	r2, #4
 80024e0:	4013      	ands	r3, r2
 80024e2:	d050      	beq.n	8002586 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	401a      	ands	r2, r3
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d146      	bne.n	8002586 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002502:	f3ef 8310 	mrs	r3, PRIMASK
 8002506:	613b      	str	r3, [r7, #16]
  return(result);
 8002508:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800250a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800250c:	2301      	movs	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f383 8810 	msr	PRIMASK, r3
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4923      	ldr	r1, [pc, #140]	; (80025b0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002524:	400a      	ands	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f383 8810 	msr	PRIMASK, r3
}
 8002532:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002534:	f3ef 8310 	mrs	r3, PRIMASK
 8002538:	61fb      	str	r3, [r7, #28]
  return(result);
 800253a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800253c:	64bb      	str	r3, [r7, #72]	; 0x48
 800253e:	2301      	movs	r3, #1
 8002540:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	f383 8810 	msr	PRIMASK, r3
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	438a      	bics	r2, r1
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	f383 8810 	msr	PRIMASK, r3
}
 8002564:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	2120      	movs	r1, #32
 8002578:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2274      	movs	r2, #116	; 0x74
 800257e:	2100      	movs	r1, #0
 8002580:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e010      	b.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	4013      	ands	r3, r2
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	425a      	negs	r2, r3
 8002596:	4153      	adcs	r3, r2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	001a      	movs	r2, r3
 800259c:	1dfb      	adds	r3, r7, #7
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d100      	bne.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80025a4:	e74b      	b.n	800243e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b014      	add	sp, #80	; 0x50
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	fffffe5f 	.word	0xfffffe5f

080025b4 <__libc_init_array>:
 80025b4:	b570      	push	{r4, r5, r6, lr}
 80025b6:	2600      	movs	r6, #0
 80025b8:	4d0c      	ldr	r5, [pc, #48]	; (80025ec <__libc_init_array+0x38>)
 80025ba:	4c0d      	ldr	r4, [pc, #52]	; (80025f0 <__libc_init_array+0x3c>)
 80025bc:	1b64      	subs	r4, r4, r5
 80025be:	10a4      	asrs	r4, r4, #2
 80025c0:	42a6      	cmp	r6, r4
 80025c2:	d109      	bne.n	80025d8 <__libc_init_array+0x24>
 80025c4:	2600      	movs	r6, #0
 80025c6:	f000 f821 	bl	800260c <_init>
 80025ca:	4d0a      	ldr	r5, [pc, #40]	; (80025f4 <__libc_init_array+0x40>)
 80025cc:	4c0a      	ldr	r4, [pc, #40]	; (80025f8 <__libc_init_array+0x44>)
 80025ce:	1b64      	subs	r4, r4, r5
 80025d0:	10a4      	asrs	r4, r4, #2
 80025d2:	42a6      	cmp	r6, r4
 80025d4:	d105      	bne.n	80025e2 <__libc_init_array+0x2e>
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
 80025d8:	00b3      	lsls	r3, r6, #2
 80025da:	58eb      	ldr	r3, [r5, r3]
 80025dc:	4798      	blx	r3
 80025de:	3601      	adds	r6, #1
 80025e0:	e7ee      	b.n	80025c0 <__libc_init_array+0xc>
 80025e2:	00b3      	lsls	r3, r6, #2
 80025e4:	58eb      	ldr	r3, [r5, r3]
 80025e6:	4798      	blx	r3
 80025e8:	3601      	adds	r6, #1
 80025ea:	e7f2      	b.n	80025d2 <__libc_init_array+0x1e>
 80025ec:	08002698 	.word	0x08002698
 80025f0:	08002698 	.word	0x08002698
 80025f4:	08002698 	.word	0x08002698
 80025f8:	0800269c 	.word	0x0800269c

080025fc <memset>:
 80025fc:	0003      	movs	r3, r0
 80025fe:	1882      	adds	r2, r0, r2
 8002600:	4293      	cmp	r3, r2
 8002602:	d100      	bne.n	8002606 <memset+0xa>
 8002604:	4770      	bx	lr
 8002606:	7019      	strb	r1, [r3, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	e7f9      	b.n	8002600 <memset+0x4>

0800260c <_init>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002612:	bc08      	pop	{r3}
 8002614:	469e      	mov	lr, r3
 8002616:	4770      	bx	lr

08002618 <_fini>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr
